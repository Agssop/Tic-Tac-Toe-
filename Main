import telebot
from telebot import types
import time

bot = telebot.TeleBot("8000709107:AAExeE76TwdIjTfca9Ib_im74n1nrPVeTUE")  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω

# –•—Ä–∞–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
games = {}


def create_board():
    return [[" " for _ in range(3)] for _ in range(3)]


def check_winner(board):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–æ–∫
    for row in board:
        if row[0] == row[1] == row[2] != " ":
            return row[0]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
    for col in range(3):
        if board[0][col] == board[1][col] == board[2][col] != " ":
            return board[0][col]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–≥–æ–Ω–∞–ª–µ–π
    if board[0][0] == board[1][1] == board[2][2] != " ":
        return board[0][0]
    if board[0][2] == board[1][1] == board[2][0] != " ":
        return board[0][2]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∏—á—å—é
    if all(cell != " " for row in board for cell in row):
        return "–ù–∏—á—å—è"

    return None


def minimax(board, depth, is_maximizing):
    winner = check_winner(board)
    if winner == "X":
        return -10 + depth
    elif winner == "O":
        return 10 - depth
    elif winner == "–ù–∏—á—å—è":
        return 0

    if is_maximizing:
        best_score = -float("inf")
        for i in range(3):
            for j in range(3):
                if board[i][j] == " ":
                    board[i][j] = "O"
                    score = minimax(board, depth + 1, False)
                    board[i][j] = " "
                    best_score = max(score, best_score)
        return best_score
    else:
        best_score = float("inf")
        for i in range(3):
            for j in range(3):
                if board[i][j] == " ":
                    board[i][j] = "X"
                    score = minimax(board, depth + 1, True)
                    board[i][j] = " "
                    best_score = min(score, best_score)
        return best_score


def find_best_move(board):
    best_score = -float("inf")
    best_move = None
    for i in range(3):
        for j in range(3):
            if board[i][j] == " ":
                board[i][j] = "O"
                score = minimax(board, 0, False)
                board[i][j] = " "
                if score > best_score:
                    best_score = score
                    best_move = (i, j)
    return best_move


def board_to_text(board):
    text = ""
    for row in board:
        text += " | ".join(row) + "\n" + "-" * 9 + "\n"
    return text


@bot.message_handler(commands=["start"])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É"))
    markup.add(types.KeyboardButton("üßß –ö–æ–Ω—Ç–∞–∫—Ç—ã"))
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è –∏–≥—Ä—ã –≤ –∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏.\n(–ü—Ä–æ–µ–∫—Ç –±—ã–ª –≤—ã–ø–æ–ª–Ω–µ–Ω –Æ–∂–∏–∫–æ–≤—ã–º –†–æ–º–∞–Ω–æ–º)",
        reply_markup=markup,
    )


@bot.message_handler(func=lambda msg: msg.text == "üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É")
def new_game(message):
    chat_id = message.chat.id
    games[chat_id] = {"board": create_board(), "player": "X"}

    markup = types.InlineKeyboardMarkup()
    for i in range(3):
        row = []
        for j in range(3):
            row.append(types.InlineKeyboardButton(" ", callback_data=f"move_{i}_{j}"))
        markup.add(*row)

    bot.send_message(chat_id, "–¢–≤–æ–π —Ö–æ–¥ (X):\n" + board_to_text(games[chat_id]["board"]), reply_markup=markup)

@bot.message_handler(func=lambda msg: msg.text == "üßß –ö–æ–Ω—Ç–∞–∫—Ç—ã")
def contacts(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã\n- Telegram - @aghssop\n- –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ - 79937403756\n- –ê–¥—Ä–µ—Å - –≥. –£–ª–∞–Ω-–£–¥—ç, —É–ª. –ü–∞–≤–ª–æ–≤–∞ 68 –ì–ë–ü–û–£ '–ë–†–ò–≠–¢'")
    markup = types.InlineKeyboardMarkup()
    code_btn = types.InlineKeyboardButton(text="–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –±–æ—Ç–∞", url='https://sudoo.ru')
    markup.add(code_btn)
    time.sleep(2)
    bot.send_message(chat_id, "–í—ã —Ç–∞–∫–∂–µ —Å–º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith("move_"))
def handle_move(call):
    chat_id = call.message.chat.id
    if chat_id not in games:
        return

    data = call.data.split("_")
    i, j = int(data[1]), int(data[2])
    board = games[chat_id]["board"]
    player = games[chat_id]["player"]

    if board[i][j] != " ":
        bot.answer_callback_query(call.id, "–≠—Ç–∞ –∫–ª–µ—Ç–∫–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞!")
        return

    board[i][j] = player
    winner = check_winner(board)

    if winner:
        if winner == "–ù–∏—á—å—è":
            text = "–ù–∏—á—å—è! üòê\n" + board_to_text(board)
        else:
            text = f"–ü–æ–±–µ–¥–∏–ª {winner}! üéâ\n" + board_to_text(board)

        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîÑ –°—ã–≥—Ä–∞—Ç—å –µ—â—ë —Ä–∞–∑", callback_data="restart"))
        bot.edit_message_text(
            text,
            chat_id=chat_id,
            message_id=call.message.message_id,
            reply_markup=markup,
        )
        del games[chat_id]
    else:
        # –•–æ–¥ –±–æ—Ç–∞ (O)
        games[chat_id]["player"] = "O" if player == "X" else "X"
        if games[chat_id]["player"] == "O":
            i_bot, j_bot = find_best_move(board)
            if i_bot is not None:
                board[i_bot][j_bot] = "O"
                winner = check_winner(board)

                if winner:
                    if winner == "–ù–∏—á—å—è":
                        text = "–ù–∏—á—å—è! üòê\n" + board_to_text(board)
                    else:
                        text = f"–ü–æ–±–µ–¥–∏–ª {winner}! üéâ\n" + board_to_text(board)

                    markup = types.InlineKeyboardMarkup()
                    markup.add(types.InlineKeyboardButton("üîÑ –°—ã–≥—Ä–∞—Ç—å –µ—â—ë —Ä–∞–∑", callback_data="restart"))
                    bot.edit_message_text(
                        text,
                        chat_id=chat_id,
                        message_id=call.message.message_id,
                        reply_markup=markup,
                    )
                    del games[chat_id]
                else:
                    games[chat_id]["player"] = "X"
                    markup = types.InlineKeyboardMarkup()
                    for i in range(3):
                        row = []
                        for j in range(3):
                            row.append(types.InlineKeyboardButton(board[i][j], callback_data=f"move_{i}_{j}"))
                        markup.add(*row)

                    bot.edit_message_text(
                        "–¢–≤–æ–π —Ö–æ–¥ (X):\n" + board_to_text(board),
                        chat_id=chat_id,
                        message_id=call.message.message_id,
                        reply_markup=markup,
                    )
            else:
                bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ —Ö–æ–¥–∞ –±–æ—Ç–∞")


@bot.callback_query_handler(func=lambda call: call.data == "restart")
def restart_game(call):
    chat_id = call.message.chat.id
    new_game(call.message)


if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    bot.polling(none_stop=True)
